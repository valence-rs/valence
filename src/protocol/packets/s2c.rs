//! Server to client packets.

use super::*;

pub mod status {
    use super::*;

    def_struct! {
        /// https://wiki.vg/Protocol#Status_Response
        StatusResponse {
            /// See [Server List Ping#Response](https://wiki.vg/Server_List_Ping#Response);
            /// as with all strings this is prefixed by its length as a VarInt.
            /// 
            /// https://wiki.vg/Protocol#Status_Response
            json_response: String
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Ping_Response
        PingResponse {
            /// Should be the same as the payload from ping.
            /// 
            /// ---
            /// Should be the same as sent by the client.
            /// 
            /// https://wiki.vg/Protocol#Ping_Response
            payload: u64
        }
    }

    def_packet_group! {
        S2cStatusPacket {
            StatusResponse = 0,
            PingResponse = 1,
        }
    }
}

pub mod login {
    use super::*;

    def_struct! {
        /// https://wiki.vg/Protocol#Disconnect_(login)
        Disconnect {
            /// The reason why the player was disconnected.
            /// 
            /// https://wiki.vg/Protocol#Disconnect_(login)
            reason: Text,
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Encryption_Request
        EncryptionRequest {
            /// Currently unused
            /// 
            /// ---
            /// Appears to be empty.
            /// 
            /// https://wiki.vg/Protocol#Encryption_Request
            server_id: BoundedString<0, 20>,
            /*/// Length of Public Key
            /// 
            /// https://wiki.vg/Protocol#Encryption_Request
            public_key_length: VarInt,*/
            /// The RSA public key
            /// 
            /// ---
            /// The server's public key, in bytes.
            /// 
            /// https://wiki.vg/Protocol#Encryption_Request
            public_key: Vec<u8>,
            /*/// Length of Verify Token. Always 4 for Notchian servers.
            /// 
            /// https://wiki.vg/Protocol#Encryption_Request
            verify_token_length: VarInt,*/
            /// A sequence of random bytes generated by the server.
            /// 
            /// https://wiki.vg/Protocol#Encryption_Request
            verify_token: BoundedArray<u8, 16, 16>,
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Login_Success
        LoginSuccess {
            uuid: Uuid,
            username: BoundedString<3, 16>,
            /// Number of elements in the following array.
            /// 
            /// https://wiki.vg/Protocol#Login_Success
            number_of_properties: VarInt,
            properties: Vec<Property>,
        }
    }

    def_struct! {
        /// Enables compression. If compression is enabled, all following packets are encoded in the compressed packet format.
        /// Negative values will disable compression, meaning the packet format should remain in the uncompressed packet format.
        /// However, this packet is entirely optional, and if not sent, compression will also not be enabled
        /// (the notchian server does not send the packet when compression is disabled).
        /// 
        /// https://wiki.vg/Protocol#Set_Compression
        SetCompression {
            /// Maximum size of a packet before it is compressed.
            /// 
            /// https://wiki.vg/Protocol#Set_Compression
            threshold: VarInt
        }
    }

    def_struct! {
        /// Used to implement a custom handshaking flow together with [Login Plugin Response](https://wiki.vg/Protocol#Login_Plugin_Response).
        ///
        /// Unlike plugin messages in "play" mode, these messages follow a lock-step request/response scheme,
        /// where the client is expected to respond to a request indicating whether it understood.
        /// The notchian client always responds that it hasn't understood, and sends an empty payload.
        /// 
        /// https://wiki.vg/Protocol#Login_Plugin_Request
        LoginPluginRequest {
            /// Generated by the server - should be unique to the connection.
            /// 
            /// https://wiki.vg/Protocol#Login_Plugin_Request
            message_id: VarInt,
            /// Name of the [plugin channel](https://wiki.vg/Plugin_channels) used to send the data.
            /// 
            /// https://wiki.vg/Protocol#Login_Plugin_Request
            channel: Ident,
            /// Any data, depending on the channel. The length of this array must be inferred from the packet length.
            /// 
            /// https://wiki.vg/Protocol#Login_Plugin_Request
            data: RawBytes,
        }
    }

    def_packet_group! {
        S2cLoginPacket {
            Disconnect = 0,
            EncryptionRequest = 1,
            LoginSuccess = 2,
            SetCompression = 3,
            LoginPluginRequest = 4,
        }
    }
}

pub mod play {
    use super::*;

    def_struct! {
        /// Sent by the server when a vehicle or other non-living entity is created.
        /// 
        /// https://wiki.vg/Protocol#Spawn_Entity
        SpawnEntity {
            /// A unique integer ID mostly used in the protocol to identify the entity.
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            entity_id: VarInt,
            /// A unique identifier that is mostly used in persistence and places where the uniqueness matters more.
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            entity_uuid: Uuid,
            /// In the packet it's actually called "type".
            /// The type of the entity (see "type" field of the list of [Mob types](https://wiki.vg/Entity_metadata#Mobs)).
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            kind: VarInt,
            /// Position of entity. In packet it's actually three diffrent values: "X", "Y" and "Z",
            /// But here they are combined into one ```Vec3<f64>```
            position: Vec3<f64>,
            /// To get the real pitch, you must divide this by (256.0F / 360.0F)
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            pitch: ByteAngle,
            /// To get the real yaw, you must divide this by (256.0F / 360.0F)
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            yaw: ByteAngle,
            head_yaw: ByteAngle,
            /// Meaning dependent on the value of the Type field, see [Object Data](https://wiki.vg/Object_Data) for details.
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            data: VarInt,
            /// Velocity of entity. In packet it's actually three diffrent values: "Velocity X", "Velocity Y" and "Velocity Z"
            /// But here they are combined into one ```Vec<i16>```. Same units as [Set Entity Motion](https://wiki.vg/Protocol#Set_Entity_Motion).
            /// 
            /// https://wiki.vg/Protocol#Spawn_Entity
            velocity: Vec3<i16>,
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Spawn_Experience_Orb
        SpawnExperienceOrb {
            entity_id: VarInt,
            /// Position of entity. In packet it's actually three diffrent values: "X", "Y" and "Z",
            /// But here they are combined into one ```Vec3<f64>```
            position: Vec3<f64>,
            /// The amount of experience this orb will reward once collected.
            /// 
            /// https://wiki.vg/Protocol#Spawn_Experience_Orb
            count: i16,
        }
    }

    def_struct! {
        /// This packet is sent by the server when a player comes into visible range, not when a player joins.
        /// 
        /// This packet must be sent after the [Player Info](https://wiki.vg/Protocol#Player_Info) packet that adds the player data for the client to use when spawning a player.
        /// If the Player Info for the player spawned by this packet is not present when this packet arrives,
        /// Notchian clients will not spawn the player entity. The Player Info packet includes skin/cape data.
        /// 
        /// Servers can, however, safely spawn player entities for players not in visible range. The client appears to handle it correctly.
        /// 
        /// https://wiki.vg/Protocol#Spawn_Player
        SpawnPlayer {
            /// A unique integer ID mostly used in the protocol to identify the player.
            /// 
            /// https://wiki.vg/Protocol#Spawn_Player
            entity_id: VarInt,
            /// See [below](https://wiki.vg/Protocol#Spawn_Player) for notes on [offline mode](https://minecraft.fandom.com/wiki/Server.properties%23online-mode) and NPCs.
            /// 
            /// https://wiki.vg/Protocol#Spawn_Player
            player_uuid: Uuid,
            /// Position of entity. In packet it's actually three diffrent values: "X", "Y" and "Z",
            /// But here they are combined into one ```Vec3<f64>```
            position: Vec3<f64>,
            yaw: ByteAngle,
            pitch: ByteAngle,
        }
    }

    def_struct! {
        /// Sent whenever an entity should change animation.
        /// 
        /// https://wiki.vg/Protocol#Entity_Animation_(clientbound)
        EntityAnimation {
            /// Player ID.
            /// 
            /// https://wiki.vg/Protocol#Entity_Animation_(clientbound)
            entity_id: VarInt,
            /// Animation ID (see [below](https://wiki.vg/Protocol#Entity_Animation_(clientbound))).
            /// 
            /// https://wiki.vg/Protocol#Entity_Animation_(clientbound)
            animation: u8,
        }
    }

    def_struct! {
        /// Sent as a response to [Client Command](https://wiki.vg/Protocol#Client_Command) (id 1).
        /// Will only send the changed values if previously requested.
        /// 
        /// https://wiki.vg/Protocol#Award_Statistics
        AwardStatistics {
            /// Number of elements in the following array.
            /// 
            /// https://wiki.vg/Protocol#Award_Statistics
            count: VarInt,
            /// An struct to store the values of the Statistics.
            statistic: Statistic,
        }
    }

    def_struct! {
        /// An struct to store the values of the Statistics
        Statistic {
            /// See [second table](https://wiki.vg/Protocol#Award_Statistics).
            /// 
            /// https://wiki.vg/Protocol#Award_Statistics
            category_id: Vec<VarInt>, // TODO: use enum?
            /// See [third table](https://wiki.vg/Protocol#Award_Statistics).
            /// 
            /// https://wiki.vg/Protocol#Award_Statistics
            statistic_id: Vec<VarInt>, // TODO: use enum for custom category?
            /// The amount to set it to.
            /// 
            /// https://wiki.vg/Protocol#Award_Statistics
            value: Vec<VarInt>,
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Acknowledge_Block_Change
        AcknowledgeBlockChange {
            /// Represents the sequence to acknowledge, this is used for properly syncing block changes to the client after interactions.
            /// 
            /// https://wiki.vg/Protocol#Acknowledge_Block_Change
            sequence_id: VarInt,
        }
    }

    def_struct! {
        /// 0–9 are the displayable destroy stages and each other number means that there is no animation on this coordinate.
        /// 
        /// Block break animations can still be applied on air; the animation will remain visible although there is no block being broken.
        /// However, if this is applied to a transparent block, odd graphical effects may happen, including water losing its transparency.
        /// (An effect similar to this can be seen in normal gameplay when breaking ice blocks).
        /// 
        /// If you need to display several break animations at the same time you have to give each of them a unique Entity ID.
        /// The entity ID does not need to correspond to an actual entity on the client. It is valid to use a randomly generated number.
        /// 
        ///  https://wiki.vg/Protocol#SetBlock_Destroy_Stage
        SetBlockDestroyStage {
            /// The ID of the entity breaking the block.
            /// 
            /// https://wiki.vg/Protocol#SetBlock_Destroy_Stage
            entity_id: VarInt,
            /// Block Position.
            /// 
            /// https://wiki.vg/Protocol#SetBlock_Destroy_Stage
            location: BlockPos,
            /// 0–9 to set it, any other value to remove it.
            /// 
            /// https://wiki.vg/Protocol#SetBlock_Destroy_Stage
            destroy_stage: BoundedInt<u8, 0, 10>,
        }
    }

    def_struct! {
        /// Sets the block entity associated with the block at the given location.
        /// 
        /// https://wiki.vg/Protocol#Block_Entity_Data
        BlockEntityData {
            /// The position of the block entity.
            location: BlockPos,
            /// In the packet it's actually called "type".
            /// The type (kind) of the block entity.
            /// 
            /// https://wiki.vg/Protocol#Block_Entity_Data
            kind: VarInt, // TODO: use enum here
            /// Data to set. May be a TAG_END (0), in which case the block entity at the given location is removed
            /// (though this is not required since the client will remove the block entity automatically on chunk unload or block removal).
            /// 
            /// https://wiki.vg/Protocol#Block_Entity_Data
            data: Compound,
        }
    }

    def_struct! {
        /// This packet is used for a number of actions and animations performed by blocks, usually non-persistent.
        /// The client ignores the provided block type and instead uses the block state in their world.
        ///
        /// See [Block Actions](https://wiki.vg/Block_Actions) for a list of values.
        /// 
        /// https://wiki.vg/Protocol#Block_Action
        BlockAction {
            /// Block coordinates.
            /// 
            /// https://wiki.vg/Protocol#Block_Action
            location: BlockPos,
            /// Varies depending on block — see [Block Actions](https://wiki.vg/Block_Actions).
            /// 
            /// https://wiki.vg/Protocol#Block_Action
            action_id: u8,
            /// Varies depending on block — see [Block Actions](https://wiki.vg/Block_Actions).
            /// 
            /// https://wiki.vg/Protocol#Block_Action
            action_param: u8,
            /// The block type ID for the block. This must match the block at the given coordinates.
            /// 
            /// https://wiki.vg/Protocol#Block_Action
            block_type: VarInt, // TODO: use BlockType type.
        }
    }

    def_struct! {
        /// Fired whenever a block is changed within the render distance.
        /// 
        /// https://wiki.vg/Protocol#Block_Update
        BlockUpdate {
            /// Block Coordinates.
            /// 
            /// https://wiki.vg/Protocol#Block_Update
            location: BlockPos,
            /// The new block state ID for the block as given in the [global palette](https://minecraft.fandom.com/wiki/Data_values%23Block_IDs).
            /// See that section for more information.
            /// 
            /// https://wiki.vg/Protocol#Block_Update
            block_id: VarInt,
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Boss_Bar
        BossBar {
            /// Unique ID for this bar.
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            uuid: Uuid,
            /// Determines the layout of the remaining packet.
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            action: BossBarAction,
        }
    }

    def_enum! {
        BossBarAction: VarInt {
            Add: BossBarActionAdd = 0,
            Remove: BossBarActionRemove = 1,
        }
    }

    def_struct! {
        BossBarActionAdd {
            /// Title of boss bar.
            title: Text,
            /// From 0 to 1. Values greater than 1 do not crash a Notchian client,
            /// and start [rendering part of a second health bar](https://i.johni0702.de/nA.png) at around 1.5.
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            health: f32,
            /// Color ID (See BossBarColor)
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            color: BossBarColor,
            /// Type of division (see BossBarDivision).
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            division: BossBarDivision,
            /// TODO: bitmask
            /// 
            /// ---
            /// Bit mask. 0x1: should darken sky, 0x2: is dragon bar (used to play end music),
            /// 0x04: create fog (previously was also controlled by 0x02).
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            flags: u8,
        }
    }

    def_struct! {
        /// Removes this boss bar.
        /// 
        /// https://wiki.vg/Protocol#Boss_Bar
        BossBarActionRemove {}
    }

    def_struct! {
        /// Update the health of the boss bar
        /// 
        /// https://wiki.vg/Protocol#Boss_Bar
        BossBarActionUpdateHealth {
            /// From 0 to 1. Values greater than 1 do not crash a Notchian client,
            /// and start [rendering part of a second health bar](https://i.johni0702.de/nA.png) at around 1.5.
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            health: f32
        }
    }

    def_struct! {
        /// Update the Title of the boss bar.
        /// 
        /// https://wiki.vg/Protocol#Boss_Bar
        BossBarActionUpdateTitle {
            /// Title of boss bar.
            title: Text,
        }
    }

    def_struct! {
        /// Update the style of the boss bar
        /// 
        /// https://wiki.vg/Protocol#Boss_Bar
        BossBarActionUpdateStyle {
            /// Color ID (See BossBarColor)
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            color: BossBarColor,
            /// Type of division (see BossBarDivision).
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            division: BossBarDivision,
        }
    }

    def_struct! {
        /// Update the flags of the boss bar
        /// 
        /// https://wiki.vg/Protocol#Boss_Bar
        BossBarActionUpdateFlags {
            /// TODO: bitmask
            /// 
            /// ---
            /// Bit mask. 0x1: should darken sky, 0x2: is dragon bar (used to play end music),
            /// 0x04: create fog (previously was also controlled by 0x02).
            /// 
            /// https://wiki.vg/Protocol#Boss_Bar
            flags: u8,
        }
    }

    def_enum! {
        BossBarColor: VarInt {
            Pink = 0,
            Blue = 1,
            Red = 2,
            Green = 3,
            Yellow = 4,
            Purple = 5,
            White = 6,
        }
    }

    def_enum! {
        BossBarDivision: VarInt {
            NoDivision = 0,
            SixNotches = 1,
            TenNotches = 2,
            TwelveNotches = 3,
            TwentyNotches = 4,
        }
    }

    def_struct! {
        /// Changes the difficulty setting in the client's option menu
        /// 
        /// https://wiki.vg/Protocol#Change_Difficulty
        ChangeDifficulty {
            difficulty: Difficulty,
            difficulty_locked: bool,
        }
    }

    def_enum! {
        Difficulty: u8 {
            Peaceful = 0,
            Easy = 1,
            Normal = 2,
            Hard = 3,
        }
    }

    def_struct! {
        /// Clear the client's current title information, with the option to also reset it.
        /// 
        /// https://wiki.vg/Protocol#Clear_Titles
        ClearTitles {
            reset: bool,
        }
    }

    def_enum! {
        SoundCategory: VarInt {
            Master = 0,
            Music = 1,
            Record = 2,
            Weather = 3,
            Block = 4,
            Hostile = 5,
            Neutral = 6,
            Player = 7,
            Ambient = 8,
            Voice = 9,
        }
    }

    def_struct! {
        /// - See also: [#Sound](https://wiki.vg/Protocol#Sound)
        /// 
        /// Used to play a sound effect on the client. Custom sounds may be added by resource packs.
        /// 
        /// https://wiki.vg/Protocol#Custom_Sound_Effect
        CustomSoundEffect {
            /// All sound effect names can be seen [here](https://pokechu22.github.io/Burger/1.19.html#sounds).
            /// 
            /// https://wiki.vg/Protocol#Custom_Sound_Effect
            name: Ident,
            /// The category that this sound will be played from ([current categories](https://gist.github.com/konwboj/7c0c380d3923443e9d55)).
            /// 
            /// https://wiki.vg/Protocol#Custom_Sound_Effect
            category: SoundCategory,
            /// Position of the sound effect. In packet it's actually three diffrent values: "Effect Position X",
            /// "Effect Position Y" and "Effect Position Z", But here they are combined into one ```Vec3<i32>```
            /// 
            /// https://wiki.vg/Protocol#Custom_Sound_Effect
            position: Vec3<i32>,
            /// 1 is 100%, can be more.
            /// 
            /// https://wiki.vg/Protocol#Custom_Sound_Effect
            volume: f32,
            /// Float between 0.5 and 2.0 by Notchian clients.
            /// 
            /// https://wiki.vg/Protocol#Custom_Sound_Effect
            pitch: f32,
            /// Seed used to pick sound variant.
            /// 
            /// https://wiki.vg/Protocol#Custom_Sound_Effect
            seed: i64,
        }
    }

    def_struct! {
        /// Sent by the server before it disconnects a client.
        /// The client assumes that the server has already closed the connection by the time the packet arrives.
        /// 
        /// https://wiki.vg/Protocol#Disconnect_(play)
        Disconnect {
            /// Displayed to the client when the connection terminates.
            /// 
            /// https://wiki.vg/Protocol#Disconnect_(play)
            reason: Text,
        }
    }

    def_struct! {
        /// Entity statuses generally trigger an animation for an entity.
        /// The available statuses vary by the entity's type (and are available to subclasses of that type as well).
        /// 
        /// https://wiki.vg/Protocol#Entity_Event
        EntityEvent {
            /// Id of entity
            entity_id: i32,
            /// See [Entity statuses](https://wiki.vg/Entity_statuses) for a list of which statuses are valid for each type of entity.
            /// 
            /// https://wiki.vg/Protocol#Entity_Event
            entity_status: u8,
        }
    }

    def_struct! {
        /// Tells the client to unload a chunk column.
        /// 
        /// https://wiki.vg/Protocol#Unload_Chunk
        UnloadChunk {
            /// Block coordinate divided by 16, rounded down.
            /// 
            /// https://wiki.vg/Protocol#Unload_Chunk
            chunk_x: i32,
            /// Block coordinate divided by 16, rounded down.
            /// 
            /// https://wiki.vg/Protocol#Unload_Chunk
            chunk_z: i32
        }
    }

    def_struct! {
        /// Used for a wide variety of game events, from weather to bed use to gamemode to demo messages.
        /// 
        /// https://wiki.vg/Protocol#Game_Event
        GameEvent {
            /// See [second table](https://wiki.vg/Protocol#Game_Event)
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            event: GameEventChangeReason,
            /// Depends on Reason.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            value: f32,
        }
    }

    def_enum! {
        /// See [second table](https://wiki.vg/Protocol#Game_Event)
        /// 
        /// https://wiki.vg/Protocol#Game_Event
        GameEventChangeReason: u8 {
            /// Note: Sends message 'block.minecraft.spawn.not_valid'(You have no home bed or charged respawn anchor, or it was obstructed) to the client.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            NoRespawnBlockAvailable = 0,
            EndRaining = 1,
            BeginRaining = 2,
            /// 0: Survival, 1: Creative, 2: Adventure, 3: Spectator.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            ChangeGameMode = 3,
            /// 0: Just respawn player.
            /// 
            /// 1: Roll the credits and respawn player.
            /// 
            /// Note that 1 is only sent by notchian server when player has not yet achieved advancement "The end?", else 0 is sent.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            WinGame = 4,
            /// 0: Show welcome to demo screen
            /// 
            /// 101: Tell movement controls
            /// 
            /// 102: Tell jump control
            /// 
            /// 103: Tell inventory control
            /// 
            /// 104: Tell that the demo is over and print a message about how to take a screenshot.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            DemoEvent = 5,
            /// Note: Sent when any player is struck by an arrow.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            ArrowHitPlayer = 6,
            /// Note: Seems to change both skycolor and lightning.
            /// 
            /// Rain level starting from 0 to 1.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            RainLevelChange = 7,
            /// Note: Seems to change both skycolor and lightning (same as Rain level change, but doesn't start rain).
            /// It also requires rain to render by notchian client.
            /// 
            /// Thunder level starting from 0 to 1.
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            ThunderLevelChange = 8,
            PlayPufferfishStingSound = 9,
            PlayElderGuardianMobAppearance = 10,
            /// 0: Enable respawn screen, 1: Immediately respawn (sent when the doImmediateRespawn gamerule changes).
            /// 
            /// https://wiki.vg/Protocol#Game_Event
            EnableRespawnScreen = 11,
        }
    }

    def_struct! {
        /// https://wiki.vg/Protocol#Initialize_World_Border
        InitializeWorldBorder {
            x: f64,
            z: f64,
            /// Current length of a single side of the world border, in meters.
            /// 
            /// https://wiki.vg/Protocol#Initialize_World_Border
            old_diameter: f64,
            /// Target length of a single side of the world border, in meters.
            /// 
            /// https://wiki.vg/Protocol#Initialize_World_Border
            new_diameter: f64,
            /// Number of real-time milliseconds until New Diameter is reached.
            /// It appears that Notchian server does not sync world border speed to game ticks,
            /// so it gets out of sync with server lag. If the world border is not moving, this is set to 0.
            /// 
            /// https://wiki.vg/Protocol#Initialize_World_Border
            speed: VarLong,
            /// Resulting coordinates from a portal teleport are limited to ±value. Usually 29999984.
            /// 
            /// https://wiki.vg/Protocol#Initialize_World_Border
            portal_teleport_boundary: VarInt,
            /// In meters.
            /// 
            /// https://wiki.vg/Protocol#Initialize_World_Border
            warning_blocks: VarInt,
            /// In seconds as set by `/worldborder warning time`.
            /// 
            /// https://wiki.vg/Protocol#Initialize_World_Border
            warning_time: VarInt,
        }
    }

    def_struct! {
        /// The server will frequently send out a keep-alive, each containing a random ID.
        /// The client must respond with the same payload (see serverbound Keep Alive).
        /// If the client does not respond to them for over 30 seconds, the server kicks the client.
        /// Vice versa, if the server does not send any keep-alives for 20 seconds,
        /// the client will disconnect and yields a "Timed out" exception.
        /// 
        /// The Notchian server uses a system-dependent time in milliseconds to generate the keep alive ID value.
        /// 
        /// https://wiki.vg/Protocol#Keep_Alive_(clientbound)
        KeepAlive {
            keep_alive_id: i64,
        }
    }

    def_struct! {
        /// This packet sends all block entities in the chunk
        /// (though sending them is not required; it is still legal to send them with [Block Entity Data](https://wiki.vg/Protocol#Block_Entity_Data) later).
        /// The light data in this packet is the same format as in the [Update Light](https://wiki.vg/Protocol#Update_Light) packet.
        /// 
        /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
        ChunkDataandUpdateLight {
            /// Chunk coordinate (block coordinate divided by 16, rounded down)
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            chunk_x: i32,
            /// Chunk coordinate (block coordinate divided by 16, rounded down)
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            chunk_z: i32,
            /// Compound containing one long array named `MOTION_BLOCKING`,which is a heightmap for the highest solid block at each position
            /// in the chunk (as a compacted long array with 256 entries, with the number of bits per entry varying depending on the world's height,
            /// defined by the formula `ceil(log2(height + 1))`). The Notchian server also adds a `WORLD_SURFACE` long array, the purpose of which is unknown,
            /// but it's not required for the chunk to be accepted.
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            heightmaps: NbtBridge<ChunkDataHeightmaps>,
            /// Size of Data in bytes
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            size: VarInt,
            /// See [data structure](https://wiki.vg/Chunk_Format#Data_structure) in Chunk Format
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            data: Vec<u8>,
            /// Number of elements in the following array
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            number_of_block_entities: VarInt,
            /// The block entities in a chunk
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            block_entities: Vec<ChunkDataBlockEntity>,
            /// If edges should be trusted for light updates.
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            trust_edges: bool,
            /// BitSet containing bits for each section in the world + 2.
            /// Each set bit indicates that the corresponding 16×16×16 chunk section has data in the Sky Light array below.
            /// The least significant bit is for blocks 16 blocks to 1 block below the min world height (one section below the world),
            /// while the most significant bit covers blocks 1 to 16 blocks above the max world height (one section above the world).
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            sky_light_mask: BitVec<u64>,
            /// BitSet containing bits for each section in the world + 2.
            /// Each set bit indicates that the corresponding 16×16×16 chunk section has data in the Block Light array below.
            /// The order of bits is the same as in Sky Light Mask.
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            block_light_mask: BitVec<u64>,
            /// BitSet containing bits for each section in the world + 2.
            /// Each set bit indicates that the corresponding 16×16×16 chunk section has all zeros for its Sky Light data.
            /// The order of bits is the same as in Sky Light Mask.
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            empty_sky_light_mask: BitVec<u64>,
            /// BitSet containing bits for each section in the world + 2.
            /// Each set bit indicates that the corresponding 16×16×16 chunk section has all zeros for its Block Light data.
            /// The order of bits is the same as in Sky Light Mask.
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            empty_block_light_mask: BitVec<u64>,
            /// Number of entries in the following array; should match the number of bits set in Sky Light Mask
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            sky_light_array_count: VarInt,
            /// There is 1 array for each bit set to true in the sky light mask, starting with the lowest value.
            /// Half a byte per light value. Indexed `((y<<8) | (z<<4) | x) / 2` If there's a remainder, masked 0xF0 else 0x0F.
            /// 
            /// Length of the following array in bytes (always 2048)
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            sky_light_arrays: Vec<[u8; 2048]>,
            /// Number of entries in the following array; should match the number of bits set in Block Light Mask
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            block_light_array_count: VarInt,
            /// There is 1 array for each bit set to true in the block light mask, starting with the lowest value.
            /// Half a byte per light value. Indexed `((y<<8) | (z<<4) | x) / 2` If there's a remainder, masked 0xF0 else 0x0F.
            /// 
            /// Length of the following array in bytes (always 2048)
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            block_light_arrays: Vec<[u8; 2048]>,
        }
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct ChunkDataHeightmaps {
        #[serde(rename = "MOTION_BLOCKING", with = "crate::nbt::long_array")]
        pub motion_blocking: Vec<i64>,
    }

    def_struct! {
        ChunkDataBlockEntity {
            /// The packed section coordinates, calculated from `((blockX & 15) << 4) | (blockZ & 15)`
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            packed_xz: i8,
            /// The height relative to the world
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            y: i16,
            /// The type (kind) of block entity
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            kind: VarInt,
            /// The block entity's data, without the X, Y, and Z values
            /// 
            /// https://wiki.vg/Protocol#Chunk_Data_and_Update_Light
            data: Compound,
        }
    }

    def_struct! {
        /// See [Protocol Encryption](https://wiki.vg/Protocol_Encryption) for information on logging in.
        /// 
        /// https://wiki.vg/Protocol#Login_(play)
        Login {
            /// The player's Entity ID (EID).
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            entity_id: i32,
            is_hardcore: bool,
            /// The players gamemode
            gamemode: GameMode,
            /// The hardcore flag is not included. The previous gamemode. Defaults to -1 if there is no previous gamemode. (More information needed)
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            previous_gamemode: GameMode,
            /// Size of the following array.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            dimension_count: VarInt,
            /// Identifiers for all dimensions on the server.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            dimension_names: Vec<Ident>,
            /// Represents certain registries that are sent from the server and are applied on the client.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            registry_codec: NbtBridge<RegistryCodec>,
            /// Name of the dimension type being spawned into.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            dimension_type_name: Ident,
            /// Name of the dimension being spawned into.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            dimension_name: Ident,
            /// First 8 bytes of the SHA-256 hash of the world's seed. Used client side for biome noise
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            hashed_seed: i64,
            /// Was once used by the client to draw the player list, but now is ignored.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            max_players: VarInt,
            /// Render distance (2-32).
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            view_distance: BoundedInt<VarInt, 2, 32>,
            /// The distance that the client will process specific things, such as entities.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            simulation_distance: VarInt,
            /// If true, a Notchian client shows reduced information on the [debug screen](https://minecraft.fandom.com/wiki/Debug_screen). 
            /// For servers in development, this should almost always be false.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            reduced_debug_info: bool,
            /// 	Set to false when the doImmediateRespawn gamerule is true.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            enable_respawn_screen: bool,
            /// True if the world is a [debug mode](https://minecraft.fandom.com/wiki/Debug_mode) world;
            /// debug mode worlds cannot be modified and have predefined blocks.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            is_debug: bool,
            /// If this is a superflat world.
            /// Superflat worlds have different void fog and horizon levels.
            /// 
            /// True if the world is a [superflat](https://minecraft.fandom.com/wiki/Superflat) world;
            /// flat worlds have different void fog and a horizon at y=0 instead of y=63.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            is_flat: bool,
            /// Has the name of the dimension and location of the players last death.
            /// 
            /// https://wiki.vg/Protocol#Login_(play)
            last_death_location: Option<(Ident, BlockPos)>,
        }
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct RegistryCodec {
        #[serde(rename = "minecraft:dimension_type")]
        pub dimension_type_registry: DimensionTypeRegistry,
        #[serde(rename = "minecraft:worldgen/biome")]
        pub biome_registry: BiomeRegistry,
        #[serde(rename = "minecraft:chat_type")]
        pub chat_type_registry: ChatTypeRegistry,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct DimensionTypeRegistry {
        #[serde(rename = "type")]
        pub kind: Ident,
        pub value: Vec<DimensionTypeRegistryEntry>,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct DimensionTypeRegistryEntry {
        pub name: Ident,
        pub id: i32,
        pub element: DimensionType,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct DimensionType {
        pub piglin_safe: bool,
        pub has_raids: bool,
        pub monster_spawn_light_level: i32,
        pub monster_spawn_block_light_limit: i32,
        pub natural: bool,
        pub ambient_light: f32,
        pub fixed_time: Option<i64>,
        pub infiniburn: String, // TODO: tag type?
        pub respawn_anchor_works: bool,
        pub has_skylight: bool,
        pub bed_works: bool,
        pub effects: Ident,
        pub min_y: i32,
        pub height: i32,
        pub logical_height: i32,
        pub coordinate_scale: f64,
        pub ultrawarm: bool,
        pub has_ceiling: bool,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeRegistry {
        #[serde(rename = "type")]
        pub kind: Ident,
        pub value: Vec<Biome>,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct Biome {
        pub name: Ident,
        pub id: i32,
        pub element: BiomeProperty,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeProperty {
        pub precipitation: String,
        pub depth: f32,
        pub temperature: f32,
        pub scale: f32,
        pub downfall: f32,
        pub category: String,
        pub temperature_modifier: Option<String>,
        pub effects: BiomeEffects,
        pub particle: Option<BiomeParticle>,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeEffects {
        pub sky_color: i32,
        pub water_fog_color: i32,
        pub fog_color: i32,
        pub water_color: i32,
        pub foliage_color: Option<i32>,
        pub grass_color: Option<i32>,
        pub grass_color_modifier: Option<String>,
        pub music: Option<BiomeMusic>,
        pub ambient_sound: Option<Ident>,
        pub additions_sound: Option<BiomeAdditionsSound>,
        pub mood_sound: Option<BiomeMoodSound>,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeMusic {
        pub replace_current_music: bool,
        pub sound: Ident,
        pub max_delay: i32,
        pub min_delay: i32,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeAdditionsSound {
        pub sound: Ident,
        pub tick_chance: f64,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeMoodSound {
        pub sound: Ident,
        pub tick_delay: i32,
        pub offset: f64,
        pub block_search_extent: i32,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeParticle {
        pub probability: f32,
        pub options: BiomeParticleOptions,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct BiomeParticleOptions {
        #[serde(rename = "type")]
        pub kind: Ident,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct ChatTypeRegistry {
        #[serde(rename = "type")]
        pub kind: Ident,
        pub value: Vec<ChatTypeRegistryEntry>,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct ChatTypeRegistryEntry {
        pub name: Ident,
        pub id: i32,
        pub element: ChatType,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct ChatType {
        pub chat: ChatTypeChat,
        pub narration: ChatTypeNarration,
    }

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct ChatTypeChat {}

    #[derive(Clone, Debug, Serialize, Deserialize)]
    pub struct ChatTypeNarration {
        pub priority: String,
    }

    def_enum! {
        #[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Default, Hash)]
        GameMode: u8 {
            #[default]
            Survival = 0,
            Creative = 1,
            Adventure = 2,
            Spectator = 3,
        }
    }

    def_struct! {
        /// This packet is sent by the server when an entity moves less then 8 blocks;
        /// if an entity moves more than 8 blocks [Teleport Entity](https://wiki.vg/Protocol#Teleport_Entity) should be sent instead.
        /// 
        /// This packet allows at most 8 blocks movement in any direction, because short range is from -32768 to 32767. And `32768 / (128 * 32)` = 8.
        /// 
        /// https://wiki.vg/Protocol#Update_Entity_Position
        UpdateEntityPosition {
            entity_id: VarInt,
            /// Delta position of entity. In packet it's actually three diffrent values: "Delta X", "Delta Y" and "Delta Z",
            /// But here they are combined into one ```Vec3<i16>```
            /// 
            /// Change in X position as `(currentX * 32 - prevX * 32) * 128`
            /// 
            /// Change in Y position as `(currentY * 32 - prevY * 32) * 128`
            /// 
            /// Change in Z position as `(currentZ * 32 - prevZ * 32) * 128`
            /// 
            /// https://wiki.vg/Protocol#Update_Entity_Position
            delta: Vec3<i16>,
            /// Is the entity on ground?
            on_ground: bool,
        }
    }

    def_struct! {
        /// This packet is sent by the server when an entity rotates and moves.
        /// Since a short range is limited from -32768 to 32767, and movement is offset of fixed-point numbers,
        /// this packet allows at most 8 blocks movement in any direction. (`-32768 / (32 * 128) == -8`)
        /// 
        /// https://wiki.vg/Protocol#Update_Entity_Position_and_Rotation
        UpdateEntityPositionAndRotation {
            entity_id: VarInt,
            /// Delta position of entity. In packet it's actually three diffrent values: "Delta X", "Delta Y" and "Delta Z",
            /// But here they are combined into one ```Vec3<i16>```
            /// 
            /// Change in X position as `(currentX * 32 - prevX * 32) * 128`
            /// 
            /// Change in Y position as `(currentY * 32 - prevY * 32) * 128`
            /// 
            /// Change in Z position as `(currentZ * 32 - prevZ * 32) * 128`
            /// 
            /// https://wiki.vg/Protocol#Update_Entity_Position_and_Rotation
            delta: Vec3<i16>,
            /// New angle, not a delta.
            /// 
            /// https://wiki.vg/Protocol#Update_Entity_Position_and_Rotation
            yaw: ByteAngle,
            /// New angle, not a delta.
            /// 
            /// https://wiki.vg/Protocol#Update_Entity_Position_and_Rotation
            pitch: ByteAngle,
            /// Is the entity on ground?
            on_ground: bool,
        }
    }

    def_struct! {
        /// This packet is sent by the server when an entity rotates.
        /// 
        /// https://wiki.vg/Protocol#Update_Entity_Rotation
        UpdateEntityRotation {
            entity_id: VarInt,
            /// New angle, not a delta.
            /// 
            /// https://wiki.vg/Protocol#Update_Entity_Rotation
            yaw: ByteAngle,
            /// New angle, not a delta.
            /// 
            /// https://wiki.vg/Protocol#Update_Entity_Rotation
            pitch: ByteAngle,
            /// Is the entity on ground?
            on_ground: bool,
        }
    }

    def_struct! {
        /// Identifying the difference between Chat/System Message is important as it helps respect the user's chat visibility options.
        /// 
        /// https://wiki.vg/Protocol#Player_Chat_Message
        PlayerChatMessage {
            // TODO: more 1.19 stuff.
            message: Text,
            /// Index into the chat type registry
            kind: VarInt,
            sender: Uuid,
        }
    }

    def_enum! {
        UpdatePlayerList: VarInt {
            AddPlayer: Vec<PlayerListAddPlayer> = 0,
            UpdateGameMode: Vec<(Uuid, GameMode)> = 1,
            UpdateLatency: Vec<(Uuid, VarInt)> = 2,
            UpdateDisplayName: Vec<(Uuid, Option<Text>)> = 3,
            RemovePlayer: Vec<Uuid> = 4,
        }
    }

    def_struct! {
        PlayerListAddPlayer {
            uuid: Uuid,
            username: BoundedString<3, 16>,
            properties: Vec<Property>,
            game_mode: GameMode,
            ping: VarInt,
            display_name: Option<Text>,
            sig_data: Option<PublicKeyData>,
        }
    }

    def_struct! {
        PlayerPositionLook {
            position: Vec3<f64>,
            yaw: f32,
            pitch: f32,
            flags: PlayerPositionLookFlags,
            teleport_id: VarInt,
            dismount_vehicle: bool,
        }
    }

    def_bitfield! {
        PlayerPositionLookFlags: u8 {
            x = 0,
            y = 1,
            z = 2,
            y_rot = 3,
            x_rot = 4,
        }
    }

    def_struct! {
        EntitiesDestroy {
            entities: Vec<VarInt>,
        }
    }

    def_struct! {
        PlayerRespawn {
            dimension_type_name: Ident,
            dimension_name: Ident,
            hashed_seed: u64,
            game_mode: GameMode,
            previous_game_mode: GameMode,
            is_debug: bool,
            is_flat: bool,
            copy_metadata: bool,
            last_death_location: Option<(Ident, BlockPos)>,
        }
    }

    def_struct! {
        EntitySetHeadYaw {
            entity_id: VarInt,
            head_yaw: ByteAngle,
        }
    }

    def_struct! {
        ChunkSectionUpdate {
            chunk_section_position: i64,
            invert_trust_edges: bool,
            blocks: Vec<VarLong>,
        }
    }

    def_struct! {
        OverlayMessage {
            text: Text
        }
    }

    def_struct! {
        UpdateSelectedSlot {
            slot: BoundedInt<u8, 0, 9>,
        }
    }

    def_struct! {
        ChunkRenderDistanceCenter {
            chunk_x: VarInt,
            chunk_z: VarInt,
        }
    }

    def_struct! {
        ChunkLoadDistance {
            view_distance: BoundedInt<VarInt, 2, 32>,
        }
    }

    def_struct! {
        PlayerSpawnPosition {
            location: BlockPos,
            angle: f32,
        }
    }

    def_struct! {
        EntityTrackerUpdate {
            entity_id: VarInt,
            metadata: RawBytes,
        }
    }

    def_struct! {
        EntityVelocityUpdate {
            entity_id: VarInt,
            velocity: Vec3<i16>,
        }
    }

    def_struct! {
        ExperienceBarUpdate {
            bar: f32,
            level: VarInt,
            total_xp: VarInt,
        }
    }

    def_struct! {
        HealthUpdate {
            health: f32,
            food: VarInt,
            food_saturation: f32,
        }
    }

    def_struct! {
        UpdateSubtitle {
            subtitle_text: Text,
        }
    }

    def_struct! {
        WorldTimeUpdate {
            /// The age of the world in 1/20ths of a second.
            world_age: i64,
            /// The current time of day in 1/20ths of a second.
            /// The value should be in the range \[0, 24000].
            /// 6000 is noon, 12000 is sunset, and 18000 is midnight.
            time_of_day: i64,
        }
    }

    def_struct! {
        UpdateTitle {
            text: Text,
        }
    }

    def_struct! {
        #[derive(Copy, PartialEq, Eq)]
        TitleFade {
            /// Ticks to spend fading in.
            fade_in: u32,
            /// Ticks to keep the title displayed.
            stay: u32,
            /// Ticks to spend fading out.
            fade_out: u32,
        }
    }

    def_struct! {
        PlaySoundFromEntity {
            id: VarInt,
            category: SoundCategory,
            entity_id: VarInt,
            volume: f32,
            pitch: f32
        }
    }

    def_struct! {
        PlaySound {
            id: VarInt,
            category: SoundCategory,
            position: Vec3<i32>,
            volume: f32,
            pitch: f32,
            seed: i64
        }
    }

    def_struct! {
        GameMessage {
            chat: Text,
            /// Index into the chat type registry.
            kind: VarInt,
        }
    }

    def_struct! {
        PlayerListHeaderFooter {
            header: Text,
            footer: Text,
        }
    }

    def_struct! {
        EntityPosition {
            entity_id: VarInt,
            position: Vec3<f64>,
            yaw: ByteAngle,
            pitch: ByteAngle,
            on_ground: bool,
        }
    }

    def_struct! {
        EntityAttributes {
            entity_id: VarInt,
            properties: Vec<EntityAttributesProperty>,
        }
    }

    def_struct! {
        EntityAttributesProperty {
            key: Ident,
            value: f64,
            modifiers: Vec<EntityAttributesModifiers>
        }
    }

    def_struct! {
        EntityAttributesModifiers {
            uuid: Uuid,
            amount: f64,
            operation: u8,
        }
    }

    def_packet_group! {
        S2cPlayPacket {
            SpawnEntity = 0,
            SpawnExperienceOrb = 1,
            SpawnPlayer = 2,
            EntityAnimation = 3,
            AwardStatistics = 4,
            AcknowledgeBlockChange = 5,
            SetBlockDestroyStage = 6,
            BlockEntityData = 7,
            BlockAction = 8,
            BlockUpdate = 9,
            BossBar = 10,
            ChangeDifficulty = 11,
            ClearTitles = 13,
            CustomSoundEffect = 23,
            Disconnect = 25,
            EntityEvent = 26,
            UnloadChunk = 28,
            GameEvent = 29,
            KeepAlive = 32,
            ChunkDataandUpdateLight = 33,
            Login = 37,
            UpdateEntityPosition = 40,
            UpdateEntityPositionAndRotation = 41,
            UpdateEntityRotation = 42,
            PlayerChatMessage = 51,
            UpdatePlayerList = 55,
            PlayerPositionLook = 57,
            EntitiesDestroy = 59,
            PlayerRespawn = 62,
            EntitySetHeadYaw = 63,
            ChunkSectionUpdate = 64,
            OverlayMessage = 67,
            UpdateSelectedSlot = 74,
            ChunkRenderDistanceCenter = 75,
            ChunkLoadDistance = 76,
            PlayerSpawnPosition = 77,
            EntityTrackerUpdate = 80,
            EntityVelocityUpdate = 82,
            ExperienceBarUpdate = 84,
            HealthUpdate = 85,
            UpdateSubtitle = 91,
            WorldTimeUpdate = 92,
            UpdateTitle = 93,
            TitleFade = 94,
            PlaySoundFromEntity = 95,
            PlaySound = 96,
            GameMessage = 98,
            PlayerListHeaderFooter = 99,
            EntityPosition = 102,
            EntityAttributes = 104,
        }
    }
}
